package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    // initialize fields
    private JoinPredicate jPr;
    private DbIterator left;
    private DbIterator right;
    private Tuple tup;


    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.jPr = p;
        this.left = child1;
        this.right = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return this.jPr;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        TupleDesc leftTupDesc = this.left.getTupleDesc();
        String tupField= leftTupDesc.getFieldName(this.jPr.getField1());
        return tupField;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        TupleDesc rightTupDesc = this.right.getTupleDesc();
        String tupField= rightTupDesc.getFieldName(this.jPr.getField2());
        return tupField;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        TupleDesc leftTupDesc = this.left.getTupleDesc();
        TupleDesc rightTupDesc = this.right.getTupleDesc();
        TupleDesc result = TupleDesc.merge(leftTupDesc, rightTupDesc);
        return result;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        this.left.open();
        this.right.open();
    }

    public void close() {
        super.close();
        this.left.close();
        this.right.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.left.rewind();
        this.right.rewind();
        this.tup = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate #filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {

        while ((tup != null) || left.hasNext())
        {
            Tuple newTup;
            if (tup == null) {
                tup = left.next(); // go to next one
                newTup = tup;
            }
            else { // tup != null
                newTup = tup;
            }
//    		System.out.print("left tuple: " + leftTuple.toString());
//    		System.out.print("current left tuple: " + m_currentLeftTuple.toString());
            while (right.hasNext()) {
                Tuple newTup2 = right.next();
//        		System.out.print("right tuple: " + rightTuple.toString());
                if (jPr.filter(newTup, newTup2)) {
                    int size = newTup.getTupleDesc().numFields();
                    int size2 = newTup2.getTupleDesc().numFields();
                    Tuple merged = new Tuple(this.getTupleDesc());
                    for (int i = 0; i < size; i++) {
                        merged.setField(i, newTup.getField(i));
                    }
                    for (int j = 0; j < size2; j++) {
                        merged.setField(size + j, newTup2.getField(j));
                    }
                    return merged;
                }
            }
            tup = null;
            right.rewind();
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        return new DbIterator[]{this.left, this.right};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        if(children.length > 1){
            this.left = children[0];
            this.right = children[1];
        }
    }

}